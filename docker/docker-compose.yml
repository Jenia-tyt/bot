version: "3.9"
services:
  kafka:
    container_name: kafka-compose
    image: 'bitnami/kafka:latest'
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-compose:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-compose:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_HOST_NAME=kafka-compose
    deploy:
      resources:
        limits:
          memory: 256m

  redis:
    container_name: redis-compose
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256m

  postgres:
    image: library/postgres:${POSTGRES_IMAGE_TAG:-14}
    container_name: postgres-compose
    restart: on-failure
    environment:
      POSTGRES_DB: bot
      PGUSER: telegram
      POSTGRES_USER: telegram
      POSTGRES_PASSWORD: telegram
    expose:
      - "5432"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256m

  bot:
    container_name: bot-compose
    image: jeniatyt/bot:latest
    restart: always
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - KAFKA=kafka-compose
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health || exit 1
      interval: 30s
      retries: 3
      start_period: 40s
      timeout: 10s
    deploy:
      resources:
        limits:
          memory: 256m

  bs:
    container_name: bs-compose
    image: jeniatyt/bs:latest
    ports:
      - "8084:8084"
    restart: always
    environment:
      - PORT=8084
      - KAFKA=kafka-compose
      - POSTGRES=postgres-compose
      - REDIS=redis-compose
      - DB=bot
      - USER=telegram
      - PASSWORD=telegram
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8084/actuator/health || exit 1
      interval: 30s
      retries: 3
      start_period: 40s
      timeout: 10s
    deploy:
      resources:
        limits:
          memory: 256m