version: "3.9"
services:
  kafka:
    container_name: kafka-compose
    image: 'bitnami/kafka:latest'
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256m
    networks:
      - local

  redis:
    container_name: rc-redis-compose
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: nc -z localhost 6379 || exit -1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256m
    networks:
      - default

#сюда надо добавить постгрес

  bot:
    container_name: bot-compose
    image: jeniatyt/bot:latest
    restart: always
    depends_on:
      - kafka
    healthcheck:
      test: nc -z localhost 8080 || exit -1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256m
    networks:
      - local

  bs:
    container_name: bs-compose
    image: jeniatyt/bot:latest
    ports:
      - "8084:8084"
    restart: always
    depends_on:
      - kafka
      - redis
    healthcheck:
      test: nc -z localhost 8084 || exit -1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256m

networks:
  local: