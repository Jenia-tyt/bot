import org.springframework.util.FileCopyUtils

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.jeniatyt'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka:3.0.3'
    implementation 'org.telegram:telegrambots:6.5.0'
    implementation 'org.jfree:jfreechart:1.5.4'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

bootJar {
    new File(buildDir.toString() + "/libs").listFiles().each {it.delete()}

    File propertiesFile = new File(projectDir.toString() + "/src/main/resources/application-prod.yaml")
    File propertiesFileForBuild = new File(buildDir.toString() + "/libs/application-prod.yaml")
    FileCopyUtils.copy(propertiesFile, propertiesFileForBuild);

    doLast {
        print execute("docker build -f Dockerfile -t jeniatyt/bot:latest .", 600000)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

static String execute(String command, Integer time) {
    def sout = new StringBuffer(), serr = new StringBuffer()
    def proc = command.execute()
    proc.waitForProcessOutput(sout, serr)
    proc.waitForOrKill(time)
    if (!serr.isEmpty()) {
        return serr.toString()
    }
    return sout.toString()
}
